!function ($, window) { var defaults = { ratio: 16 / 9, videoId: "", mute: !0, repeat: !0, width: $(window).width(), wrapperZIndex: 99, playButtonClass: "tubular-play", pauseButtonClass: "tubular-pause", muteButtonClass: "tubular-mute", volumeUpClass: "tubular-volume-up", volumeDownClass: "tubular-volume-down", increaseVolumeBy: 10, start: 0 }, tubular = function (node, options) { var options = $.extend({}, defaults, options), $body = $(".tubular"), $node = $(node), $bg = $(".tubular").attr("style"), tubularContainer = '<div id="tubular-container"><div id="tubular-player"></div></div><div id="tubular-shield"></div>'; $body.prepend(tubularContainer), $node.css({ position: "relative", "z-index": options.wrapperZIndex }), window.player, window.onYouTubeIframeAPIReady = function () { player = new YT.Player("tubular-player", { width: options.width, height: Math.ceil(options.width / options.ratio), videoId: options.videoId, playerVars: { controls: 0, showinfo: 0, modestbranding: 1, wmode: "transparent", disablekb: 1, rel: 0 }, events: { onReady: onPlayerReady, onStateChange: onPlayerStateChange } }) }, window.onPlayerReady = function (e) { options.mute && e.target.mute(), e.target.seekTo(options.start), e.target.playVideo(), $("#tubular-container").fadeTo(0, 1), $("#tubular-player").attr("tabindex", "-1") }, window.onPlayerStateChange = function (state) { 0 === state.data && options.repeat && player.seekTo(options.start) }, $(".tubular").on("click", "." + options.playButtonClass, (function (e) { e.preventDefault(), player.playVideo() })).on("click", "." + options.pauseButtonClass, (function (e) { e.preventDefault(), player.pauseVideo() })).on("click", "." + options.muteButtonClass, (function (e) { e.preventDefault(), player.isMuted() ? player.unMute() : player.mute() })).on("click", "." + options.volumeDownClass, (function (e) { e.preventDefault(); var currentVolume = player.getVolume(); currentVolume < options.increaseVolumeBy && (currentVolume = options.increaseVolumeBy), player.setVolume(currentVolume - options.increaseVolumeBy) })).on("click", "." + options.volumeUpClass, (function (e) { e.preventDefault(), player.isMuted() && player.unMute(); var currentVolume = player.getVolume(); currentVolume > 100 - options.increaseVolumeBy && (currentVolume = 100 - options.increaseVolumeBy), player.setVolume(currentVolume + options.increaseVolumeBy) })) }; $.fn.tubular = function (options) { return this.each((function () { $.data(this, "tubular_instantiated") || $.data(this, "tubular_instantiated", tubular(this, options)) })) } }(jQuery, window);
