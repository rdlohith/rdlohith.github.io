function stopCarousel(carouselID) { $("#" + carouselID).flickity("pausePlayer") } function startCarousel(carouselID) { $("#" + carouselID).flickity("playPlayer") } !function (window) { var slice = Array.prototype.slice; function noop() { } function defineBridget($) { if ($) { var logError = "undefined" == typeof console ? noop : function (message) { console.error(message) }; return $.bridget = function (namespace, PluginClass) { addOptionMethod(PluginClass), bridge(namespace, PluginClass) }, $.bridget } function addOptionMethod(PluginClass) { PluginClass.prototype.option || (PluginClass.prototype.option = function (opts) { $.isPlainObject(opts) && (this.options = $.extend(!0, this.options, opts)) }) } function bridge(namespace, PluginClass) { $.fn[namespace] = function (options) { if ("string" == typeof options) { for (var args = slice.call(arguments, 1), i = 0, len = this.length; i < len; i++) { var elem = this[i], instance = $.data(elem, namespace); if (instance) if ($.isFunction(instance[options]) && "_" !== options.charAt(0)) { var returnValue = instance[options].apply(instance, args); if (void 0 !== returnValue) return returnValue } else logError("no such method '" + options + "' for " + namespace + " instance"); else logError("cannot call methods on " + namespace + " prior to initialization; attempted to call '" + options + "'") } return this } return this.each((function () { var instance = $.data(this, namespace); instance ? (instance.option(options), instance._init()) : (instance = new PluginClass(this, options), $.data(this, namespace, instance)) })) } } } "function" == typeof define && define.amd ? define("jquery-bridget/jquery.bridget", ["jquery"], defineBridget) : "object" == typeof exports ? defineBridget(require("jquery")) : defineBridget(window.jQuery) }(window), function (window) { function classReg(className) { return new RegExp("(^|\\s+)" + className + "(\\s+|$)") } var hasClass, addClass, removeClass; function toggleClass(elem, c) { var fn; (hasClass(elem, c) ? removeClass : addClass)(elem, c) } "classList" in document.documentElement ? (hasClass = function (elem, c) { return elem.classList.contains(c) }, addClass = function (elem, c) { elem.classList.add(c) }, removeClass = function (elem, c) { elem.classList.remove(c) }) : (hasClass = function (elem, c) { return classReg(c).test(elem.className) }, addClass = function (elem, c) { hasClass(elem, c) || (elem.className = elem.className + " " + c) }, removeClass = function (elem, c) { elem.className = elem.className.replace(classReg(c), " ") }); var classie = { hasClass: hasClass, addClass: addClass, removeClass: removeClass, toggleClass: toggleClass, has: hasClass, add: addClass, remove: removeClass, toggle: toggleClass }; "function" == typeof define && define.amd ? define("classie/classie", classie) : "object" == typeof exports ? module.exports = classie : window.classie = classie }(window), function () { "use strict"; function EventEmitter() { } var proto = EventEmitter.prototype, exports = this, originalGlobalValue = exports.EventEmitter; function indexOfListener(listeners, listener) { for (var i = listeners.length; i--;)if (listeners[i].listener === listener) return i; return -1 } function alias(name) { return function aliasClosure() { return this[name].apply(this, arguments) } } proto.getListeners = function getListeners(evt) { var events = this._getEvents(), response, key; if (evt instanceof RegExp) for (key in response = {}, events) events.hasOwnProperty(key) && evt.test(key) && (response[key] = events[key]); else response = events[evt] || (events[evt] = []); return response }, proto.flattenListeners = function flattenListeners(listeners) { var flatListeners = [], i; for (i = 0; i < listeners.length; i += 1)flatListeners.push(listeners[i].listener); return flatListeners }, proto.getListenersAsObject = function getListenersAsObject(evt) { var listeners = this.getListeners(evt), response; return listeners instanceof Array && ((response = {})[evt] = listeners), response || listeners }, proto.addListener = function addListener(evt, listener) { var listeners = this.getListenersAsObject(evt), listenerIsWrapped = "object" == typeof listener, key; for (key in listeners) listeners.hasOwnProperty(key) && -1 === indexOfListener(listeners[key], listener) && listeners[key].push(listenerIsWrapped ? listener : { listener: listener, once: !1 }); return this }, proto.on = alias("addListener"), proto.addOnceListener = function addOnceListener(evt, listener) { return this.addListener(evt, { listener: listener, once: !0 }) }, proto.once = alias("addOnceListener"), proto.defineEvent = function defineEvent(evt) { return this.getListeners(evt), this }, proto.defineEvents = function defineEvents(evts) { for (var i = 0; i < evts.length; i += 1)this.defineEvent(evts[i]); return this }, proto.removeListener = function removeListener(evt, listener) { var listeners = this.getListenersAsObject(evt), index, key; for (key in listeners) listeners.hasOwnProperty(key) && -1 !== (index = indexOfListener(listeners[key], listener)) && listeners[key].splice(index, 1); return this }, proto.off = alias("removeListener"), proto.addListeners = function addListeners(evt, listeners) { return this.manipulateListeners(!1, evt, listeners) }, proto.removeListeners = function removeListeners(evt, listeners) { return this.manipulateListeners(!0, evt, listeners) }, proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) { var i, value, single = remove ? this.removeListener : this.addListener, multiple = remove ? this.removeListeners : this.addListeners; if ("object" != typeof evt || evt instanceof RegExp) for (i = listeners.length; i--;)single.call(this, evt, listeners[i]); else for (i in evt) evt.hasOwnProperty(i) && (value = evt[i]) && ("function" == typeof value ? single.call(this, i, value) : multiple.call(this, i, value)); return this }, proto.removeEvent = function removeEvent(evt) { var type = typeof evt, events = this._getEvents(), key; if ("string" === type) delete events[evt]; else if (evt instanceof RegExp) for (key in events) events.hasOwnProperty(key) && evt.test(key) && delete events[key]; else delete this._events; return this }, proto.removeAllListeners = alias("removeEvent"), proto.emitEvent = function emitEvent(evt, args) { var listeners = this.getListenersAsObject(evt), listener, i, key, response; for (key in listeners) if (listeners.hasOwnProperty(key)) for (i = listeners[key].length; i--;)!0 === (listener = listeners[key][i]).once && this.removeListener(evt, listener.listener), (response = listener.listener.apply(this, args || [])) === this._getOnceReturnValue() && this.removeListener(evt, listener.listener); return this }, proto.trigger = alias("emitEvent"), proto.emit = function emit(evt) { var args = Array.prototype.slice.call(arguments, 1); return this.emitEvent(evt, args) }, proto.setOnceReturnValue = function setOnceReturnValue(value) { return this._onceReturnValue = value, this }, proto._getOnceReturnValue = function _getOnceReturnValue() { return !this.hasOwnProperty("_onceReturnValue") || this._onceReturnValue }, proto._getEvents = function _getEvents() { return this._events || (this._events = {}) }, EventEmitter.noConflict = function noConflict() { return exports.EventEmitter = originalGlobalValue, EventEmitter }, "function" == typeof define && define.amd ? define("eventEmitter/EventEmitter", [], (function () { return EventEmitter })) : "object" == typeof module && module.exports ? module.exports = EventEmitter : exports.EventEmitter = EventEmitter }.call(this), function (window) { var docElem = document.documentElement, bind = function () { }; function getIEEvent(obj) { var event = window.event; return event.target = event.target || event.srcElement || obj, event } docElem.addEventListener ? bind = function (obj, type, fn) { obj.addEventListener(type, fn, !1) } : docElem.attachEvent && (bind = function (obj, type, fn) { obj[type + fn] = fn.handleEvent ? function () { var event = getIEEvent(obj); fn.handleEvent.call(fn, event) } : function () { var event = getIEEvent(obj); fn.call(obj, event) }, obj.attachEvent("on" + type, obj[type + fn]) }); var unbind = function () { }; docElem.removeEventListener ? unbind = function (obj, type, fn) { obj.removeEventListener(type, fn, !1) } : docElem.detachEvent && (unbind = function (obj, type, fn) { obj.detachEvent("on" + type, obj[type + fn]); try { delete obj[type + fn] } catch (err) { obj[type + fn] = void 0 } }); var eventie = { bind: bind, unbind: unbind }; "function" == typeof define && define.amd ? define("eventie/eventie", eventie) : "object" == typeof exports ? module.exports = eventie : window.eventie = eventie }(window), function (window) { var prefixes = "Webkit Moz ms Ms O".split(" "), docElemStyle = document.documentElement.style; function getStyleProperty(propName) { if (propName) { if ("string" == typeof docElemStyle[propName]) return propName; var prefixed; propName = propName.charAt(0).toUpperCase() + propName.slice(1); for (var i = 0, len = prefixes.length; i < len; i++)if (prefixed = prefixes[i] + propName, "string" == typeof docElemStyle[prefixed]) return prefixed } } "function" == typeof define && define.amd ? define("get-style-property/get-style-property", [], (function () { return getStyleProperty })) : "object" == typeof exports ? module.exports = getStyleProperty : window.getStyleProperty = getStyleProperty }(window), function (window, undefined) { function getStyleSize(value) { var num = parseFloat(value), isValid; return -1 === value.indexOf("%") && !isNaN(num) && num } function noop() { } var logError = "undefined" == typeof console ? noop : function (message) { console.error(message) }, measurements = ["paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"]; function getZeroSize() { for (var size = { width: 0, height: 0, innerWidth: 0, innerHeight: 0, outerWidth: 0, outerHeight: 0 }, i = 0, len = measurements.length; i < len; i++) { var measurement; size[measurements[i]] = 0 } return size } function defineGetSize(getStyleProperty) { var isSetup = !1, getStyle, boxSizingProp, isBoxSizeOuter; function setup() { if (!isSetup) { isSetup = !0; var getComputedStyle = window.getComputedStyle, getStyleFn; if (getStyleFn = getComputedStyle ? function (elem) { return getComputedStyle(elem, null) } : function (elem) { return elem.currentStyle }, getStyle = function getStyle(elem) { var style = getStyleFn(elem); return style || logError("Style returned " + style + ". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"), style }, boxSizingProp = getStyleProperty("boxSizing")) { var div = document.createElement("div"); div.style.width = "200px", div.style.padding = "1px 2px 3px 4px", div.style.borderStyle = "solid", div.style.borderWidth = "1px 2px 3px 4px", div.style[boxSizingProp] = "border-box"; var body = document.body || document.documentElement; body.appendChild(div); var style = getStyle(div); isBoxSizeOuter = 200 === getStyleSize(style.width), body.removeChild(div) } } } function getSize(elem) { if (setup(), "string" == typeof elem && (elem = document.querySelector(elem)), elem && "object" == typeof elem && elem.nodeType) { var style = getStyle(elem); if ("none" === style.display) return getZeroSize(); var size = {}; size.width = elem.offsetWidth, size.height = elem.offsetHeight; for (var isBorderBox = size.isBorderBox = !(!boxSizingProp || !style[boxSizingProp] || "border-box" !== style[boxSizingProp]), i = 0, len = measurements.length; i < len; i++) { var measurement = measurements[i], value = style[measurement]; value = mungeNonPixel(elem, value); var num = parseFloat(value); size[measurement] = isNaN(num) ? 0 : num } var paddingWidth = size.paddingLeft + size.paddingRight, paddingHeight = size.paddingTop + size.paddingBottom, marginWidth = size.marginLeft + size.marginRight, marginHeight = size.marginTop + size.marginBottom, borderWidth = size.borderLeftWidth + size.borderRightWidth, borderHeight = size.borderTopWidth + size.borderBottomWidth, isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter, styleWidth = getStyleSize(style.width); !1 !== styleWidth && (size.width = styleWidth + (isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth)); var styleHeight = getStyleSize(style.height); return !1 !== styleHeight && (size.height = styleHeight + (isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight)), size.innerWidth = size.width - (paddingWidth + borderWidth), size.innerHeight = size.height - (paddingHeight + borderHeight), size.outerWidth = size.width + marginWidth, size.outerHeight = size.height + marginHeight, size } } function mungeNonPixel(elem, value) { if (window.getComputedStyle || -1 === value.indexOf("%")) return value; var style = elem.style, left = style.left, rs = elem.runtimeStyle, rsLeft = rs && rs.left; return rsLeft && (rs.left = elem.currentStyle.left), style.left = value, value = style.pixelLeft, style.left = left, rsLeft && (rs.left = rsLeft), value } return getSize } "function" == typeof define && define.amd ? define("get-size/get-size", ["get-style-property/get-style-property"], defineGetSize) : "object" == typeof exports ? module.exports = defineGetSize(require("desandro-get-style-property")) : window.getSize = defineGetSize(window.getStyleProperty) }(window), function (window) { var document = window.document, queue = []; function docReady(fn) { "function" == typeof fn && (docReady.isReady ? fn() : queue.push(fn)) } function onReady(event) { var isIE8NotReady = "readystatechange" === event.type && "complete" !== document.readyState; docReady.isReady || isIE8NotReady || trigger() } function trigger() { docReady.isReady = !0; for (var i = 0, len = queue.length; i < len; i++) { var fn; (0, queue[i])() } } function defineDocReady(eventie) { return "complete" === document.readyState ? trigger() : (eventie.bind(document, "DOMContentLoaded", onReady), eventie.bind(document, "readystatechange", onReady), eventie.bind(window, "load", onReady)), docReady } docReady.isReady = !1, "function" == typeof define && define.amd ? define("doc-ready/doc-ready", ["eventie/eventie"], defineDocReady) : "object" == typeof exports ? module.exports = defineDocReady(require("eventie")) : window.docReady = defineDocReady(window.eventie) }(window), function (ElemProto) { "use strict"; var matchesMethod = function () { if (ElemProto.matches) return "matches"; if (ElemProto.matchesSelector) return "matchesSelector"; for (var prefixes = ["webkit", "moz", "ms", "o"], i = 0, len = prefixes.length; i < len; i++) { var prefix, method = prefixes[i] + "MatchesSelector"; if (ElemProto[method]) return method } }(), matchesSelector; function match(elem, selector) { return elem[matchesMethod](selector) } function checkParent(elem) { var fragment; elem.parentNode || document.createDocumentFragment().appendChild(elem) } function query(elem, selector) { checkParent(elem); for (var elems = elem.parentNode.querySelectorAll(selector), i = 0, len = elems.length; i < len; i++)if (elems[i] === elem) return !0; return !1 } function matchChild(elem, selector) { return checkParent(elem), match(elem, selector) } if (matchesMethod) { var div, supportsOrphans = match(document.createElement("div"), "div"); matchesSelector = supportsOrphans ? match : matchChild } else matchesSelector = query; "function" == typeof define && define.amd ? define("matches-selector/matches-selector", [], (function () { return matchesSelector })) : "object" == typeof exports ? module.exports = matchesSelector : window.matchesSelector = matchesSelector }(Element.prototype), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("fizzy-ui-utils/utils", ["doc-ready/doc-ready", "matches-selector/matches-selector"], (function (docReady, matchesSelector) { return factory(window, docReady, matchesSelector) })) : "object" == typeof exports ? module.exports = factory(window, require("doc-ready"), require("desandro-matches-selector")) : window.fizzyUIUtils = factory(window, window.docReady, window.matchesSelector) }(window, (function factory(window, docReady, matchesSelector) { var utils = { extend: function (a, b) { for (var prop in b) a[prop] = b[prop]; return a }, modulo: function (num, div) { return (num % div + div) % div } }, objToString = Object.prototype.toString; utils.isArray = function (obj) { return "[object Array]" == objToString.call(obj) }, utils.makeArray = function (obj) { var ary = []; if (utils.isArray(obj)) ary = obj; else if (obj && "number" == typeof obj.length) for (var i = 0, len = obj.length; i < len; i++)ary.push(obj[i]); else ary.push(obj); return ary }, utils.indexOf = Array.prototype.indexOf ? function (ary, obj) { return ary.indexOf(obj) } : function (ary, obj) { for (var i = 0, len = ary.length; i < len; i++)if (ary[i] === obj) return i; return -1 }, utils.removeFrom = function (ary, obj) { var index = utils.indexOf(ary, obj); -1 != index && ary.splice(index, 1) }, utils.isElement = "function" == typeof HTMLElement || "object" == typeof HTMLElement ? function isElementDOM2(obj) { return obj instanceof HTMLElement } : function isElementQuirky(obj) { return obj && "object" == typeof obj && 1 == obj.nodeType && "string" == typeof obj.nodeName }, utils.setText = function () { var setTextProperty; function setText(elem, text) { elem[setTextProperty = setTextProperty || (void 0 !== document.documentElement.textContent ? "textContent" : "innerText")] = text } return setText }(), utils.getParent = function (elem, selector) { for (; elem != document.body;)if (elem = elem.parentNode, matchesSelector(elem, selector)) return elem }, utils.getQueryElement = function (elem) { return "string" == typeof elem ? document.querySelector(elem) : elem }, utils.handleEvent = function (event) { var method = "on" + event.type; this[method] && this[method](event) }, utils.filterFindElements = function (elems, selector) { for (var ffElems = [], i = 0, len = (elems = utils.makeArray(elems)).length; i < len; i++) { var elem = elems[i]; if (utils.isElement(elem)) if (selector) { matchesSelector(elem, selector) && ffElems.push(elem); for (var childElems = elem.querySelectorAll(selector), j = 0, jLen = childElems.length; j < jLen; j++)ffElems.push(childElems[j]) } else !1 === $(elem).hasClass("scrolldown") && !1 === $(elem).hasClass("scrolldown-hidden-anchor") && ffElems.push(elem) } return ffElems }, utils.debounceMethod = function (_class, methodName, threshold) { var method = _class.prototype[methodName], timeoutName = methodName + "Timeout"; _class.prototype[methodName] = function () { var timeout = this[timeoutName]; timeout && clearTimeout(timeout); var args = arguments, _this = this; this[timeoutName] = setTimeout((function () { method.apply(_this, args), delete _this[timeoutName] }), threshold || 100) } }, utils.toDashed = function (str) { return str.replace(/(.)([A-Z])/g, (function (match, $1, $2) { return $1 + "-" + $2 })).toLowerCase() }; var console = window.console; return utils.htmlInit = function (WidgetClass, namespace) { docReady((function () { for (var dashedNamespace = utils.toDashed(namespace), elems = document.querySelectorAll(".js-" + dashedNamespace), dataAttr = "data-" + dashedNamespace + "-options", i = 0, len = elems.length; i < len; i++) { var elem = elems[i], attr = elem.getAttribute(dataAttr), options; try { options = attr && JSON.parse(attr) } catch (error) { console && console.error("Error parsing " + dataAttr + " on " + elem.nodeName.toLowerCase() + (elem.id ? "#" + elem.id : "") + ": " + error); continue } var instance = new WidgetClass(elem, options), jQuery = window.jQuery; jQuery && jQuery.data(elem, namespace, instance) } })) }, utils })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("flickity/js/cell", ["get-size/get-size"], (function (getSize) { return factory(window, getSize) })) : "object" == typeof exports ? module.exports = factory(window, require("get-size")) : (window.Flickity = window.Flickity || {}, window.Flickity.Cell = factory(window, window.getSize)) }(window, (function factory(window, getSize) { function Cell(elem, parent) { this.element = elem, this.parent = parent, this.create() } var isIE8 = "attachEvent" in window; return Cell.prototype.create = function () { this.element.style.position = "absolute", isIE8 && this.element.setAttribute("unselectable", "on"), this.x = 0, this.shift = 0 }, Cell.prototype.destroy = function () { this.element.style.position = ""; var side = this.parent.originSide; this.element.style[side] = "" }, Cell.prototype.getSize = function () { this.size = getSize(this.element) }, Cell.prototype.setPosition = function (x) { this.x = x, this.setDefaultTarget(), this.renderPosition(x) }, Cell.prototype.setDefaultTarget = function () { var marginProperty = "left" == this.parent.originSide ? "marginLeft" : "marginRight"; this.target = this.x + this.size[marginProperty] + this.size.width * this.parent.cellAlign }, Cell.prototype.renderPosition = function (x) { var side = this.parent.originSide; this.element.style[side] = this.parent.getPositionValue(x) }, Cell.prototype.wrapShift = function (shift) { this.shift = shift, this.renderPosition(this.x + this.parent.slideableWidth * shift) }, Cell.prototype.remove = function () { this.element.parentNode.removeChild(this.element) }, Cell })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("flickity/js/animate", ["get-style-property/get-style-property", "fizzy-ui-utils/utils"], (function (getStyleProperty, utils) { return factory(window, getStyleProperty, utils) })) : "object" == typeof exports ? module.exports = factory(window, require("desandro-get-style-property"), require("fizzy-ui-utils")) : (window.Flickity = window.Flickity || {}, window.Flickity.animatePrototype = factory(window, window.getStyleProperty, window.fizzyUIUtils)) }(window, (function factory(window, getStyleProperty, utils) { for (var lastTime = 0, prefixes = "webkit moz ms o".split(" "), requestAnimationFrame = window.requestAnimationFrame, cancelAnimationFrame = window.cancelAnimationFrame, prefix, i = 0; i < prefixes.length && (!requestAnimationFrame || !cancelAnimationFrame); i++)prefix = prefixes[i], requestAnimationFrame = requestAnimationFrame || window[prefix + "RequestAnimationFrame"], cancelAnimationFrame = cancelAnimationFrame || window[prefix + "CancelAnimationFrame"] || window[prefix + "CancelRequestAnimationFrame"]; requestAnimationFrame && cancelAnimationFrame || (requestAnimationFrame = function (callback) { var currTime = (new Date).getTime(), timeToCall = Math.max(0, 16 - (currTime - lastTime)), id = window.setTimeout((function () { callback(currTime + timeToCall) }), timeToCall); return lastTime = currTime + timeToCall, id }, cancelAnimationFrame = function (id) { window.clearTimeout(id) }); var proto = { startAnimation: function () { this.isAnimating || (this.isAnimating = !0, this.restingFrames = 0, this.animate()) }, animate: function () { this.applyDragForce(), this.applySelectedAttraction(); var previousX = this.x; if (this.integratePhysics(), this.positionSlider(), this.settle(previousX), this.isAnimating) { var _this = this; requestAnimationFrame((function animateFrame() { _this.animate() })) } } }, transformProperty = getStyleProperty("transform"), is3d = !!getStyleProperty("perspective"); return proto.positionSlider = function () { var x = this.x; this.options.wrapAround && this.cells.length > 1 && (x = utils.modulo(x, this.slideableWidth), x -= this.slideableWidth, this.shiftWrapCells(x)), x += this.cursorPosition, x = this.options.rightToLeft && transformProperty ? -x : x; var value = this.getPositionValue(x); transformProperty ? this.slider.style[transformProperty] = is3d && this.isAnimating ? "translate3d(" + value + ",0,0)" : "translateX(" + value + ")" : this.slider.style[this.originSide] = value }, proto.positionSliderAtSelected = function () { if (this.cells.length) { var selectedCell = this.cells[this.selectedIndex]; this.x = -selectedCell.target, this.positionSlider() } }, proto.getPositionValue = function (position) { return this.options.percentPosition ? .01 * Math.round(position / this.size.innerWidth * 1e4) + "%" : Math.round(position) + "px" }, proto.settle = function (previousX) { this.isPointerDown || Math.round(100 * this.x) != Math.round(100 * previousX) || this.restingFrames++, this.restingFrames > 2 && (this.isAnimating = !1, delete this.isFreeScrolling, is3d && this.positionSlider(), this.dispatchEvent("settle")) }, proto.shiftWrapCells = function (x) { var beforeGap = this.cursorPosition + x; this._shiftCells(this.beforeShiftCells, beforeGap, -1); var afterGap = this.size.innerWidth - (x + this.slideableWidth + this.cursorPosition); this._shiftCells(this.afterShiftCells, afterGap, 1) }, proto._shiftCells = function (cells, gap, shift) { for (var i = 0, len = cells.length; i < len; i++) { var cell = cells[i], cellShift = gap > 0 ? shift : 0; cell.wrapShift(cellShift), gap -= cell.size.outerWidth } }, proto._unshiftCells = function (cells) { if (cells && cells.length) for (var i = 0, len = cells.length; i < len; i++)cells[i].wrapShift(0) }, proto.integratePhysics = function () { this.velocity += this.accel, this.x += this.velocity, this.velocity *= this.getFrictionFactor(), this.accel = 0 }, proto.applyForce = function (force) { this.accel += force }, proto.getFrictionFactor = function () { return 1 - this.options[this.isFreeScrolling ? "freeScrollFriction" : "friction"] }, proto.getRestingPosition = function () { return this.x + this.velocity / (1 - this.getFrictionFactor()) }, proto.applyDragForce = function () { if (this.isPointerDown) { var dragVelocity, dragForce = this.dragX - this.x - this.velocity; this.applyForce(dragForce) } }, proto.applySelectedAttraction = function () { var len = this.cells.length; if (!this.isPointerDown && !this.isFreeScrolling && len) { var cell = this.cells[this.selectedIndex], wrap = this.options.wrapAround && len > 1 ? this.slideableWidth * Math.floor(this.selectedIndex / len) : 0, distance, force = (-1 * (cell.target + wrap) - this.x) * this.options.selectedAttraction; this.applyForce(force) } }, proto })), function (window, factory) { "use strict"; if ("function" == typeof define && define.amd) define("flickity/js/flickity", ["classie/classie", "eventEmitter/EventEmitter", "eventie/eventie", "get-size/get-size", "fizzy-ui-utils/utils", "./cell", "./animate"], (function (classie, EventEmitter, eventie, getSize, utils, Cell, animatePrototype) { return factory(window, classie, EventEmitter, eventie, getSize, utils, Cell, animatePrototype) })); else if ("object" == typeof exports) module.exports = factory(window, require("desandro-classie"), require("wolfy87-eventemitter"), require("eventie"), require("get-size"), require("fizzy-ui-utils"), require("./cell"), require("./animate")); else { var _Flickity = window.Flickity; window.Flickity = factory(window, window.classie, window.EventEmitter, window.eventie, window.getSize, window.fizzyUIUtils, _Flickity.Cell, _Flickity.animatePrototype) } }(window, (function factory(window, classie, EventEmitter, eventie, getSize, utils, Cell, animatePrototype) { var jQuery = window.jQuery, getComputedStyle = window.getComputedStyle, console = window.console; function moveElements(elems, toElem) { for (elems = utils.makeArray(elems); elems.length;)toElem.appendChild(elems.shift()) } var GUID = 0, instances = {}; function Flickity(element, options) { var queryElement = utils.getQueryElement(element); queryElement ? (this.element = queryElement, jQuery && (this.$element = jQuery(this.element)), this.options = utils.extend({}, this.constructor.defaults), this.option(options), this._create()) : console && console.error("Bad element for Flickity: " + (queryElement || element)) } Flickity.defaults = { accessibility: !0, cellAlign: "center", freeScrollFriction: .075, friction: .28, percentPosition: !0, resize: !0, selectedAttraction: .025, setGallerySize: !0 }, Flickity.createMethods = [], utils.extend(Flickity.prototype, EventEmitter.prototype), Flickity.prototype._create = function () { var id = this.guid = ++GUID; this.element.flickityGUID = id, instances[id] = this, this.selectedIndex = 0, this.restingFrames = 0, this.x = 0, this.velocity = 0, this.accel = 0, this.originSide = this.options.rightToLeft ? "right" : "left", this.viewport = document.createElement("div"), this.viewport.className = "flickity-viewport", Flickity.setUnselectable(this.viewport), this._createSlider(), (this.options.resize || this.options.watchCSS) && (eventie.bind(window, "resize", this), this.isResizeBound = !0); for (var i = 0, len = Flickity.createMethods.length; i < len; i++) { var method; this[Flickity.createMethods[i]]() } this.options.watchCSS ? this.watchCSS() : this.activate() }, Flickity.prototype.option = function (opts) { utils.extend(this.options, opts) }, Flickity.prototype.activate = function () { if (!this.isActive) { var cellElems, index; this.isActive = !0, classie.add(this.element, "flickity-enabled"), this.options.rightToLeft && classie.add(this.element, "flickity-rtl"), this.getSize(), moveElements(this._filterFindCellElements(this.element.children), this.slider), this.viewport.appendChild(this.slider), this.element.appendChild(this.viewport), this.reloadCells(), this.options.accessibility && (this.element.tabIndex = 0, eventie.bind(this.element, "keydown", this)), this.emit("activate"); var initialIndex = this.options.initialIndex; index = this.isInitActivated ? this.selectedIndex : void 0 !== initialIndex && this.cells[initialIndex] ? initialIndex : 0, this.select(index, !1, !0), this.isInitActivated = !0 } }, Flickity.prototype._createSlider = function () { var slider = document.createElement("div"); slider.className = "flickity-slider", slider.style[this.originSide] = 0, this.slider = slider }, Flickity.prototype._filterFindCellElements = function (elems) { return utils.filterFindElements(elems, this.options.cellSelector) }, Flickity.prototype.reloadCells = function () { this.cells = this._makeCells(this.slider.children), this.positionCells(), this._getWrapShiftCells(), this.setGallerySize() }, Flickity.prototype._makeCells = function (elems) { for (var cellElems = this._filterFindCellElements(elems), cells = [], i = 0, len = cellElems.length; i < len; i++) { var elem = cellElems[i], cell = new Cell(elem, this); cells.push(cell) } return cells }, Flickity.prototype.getLastCell = function () { return this.cells[this.cells.length - 1] }, Flickity.prototype.positionCells = function () { this._sizeCells(this.cells), this._positionCells(0) }, Flickity.prototype._positionCells = function (index) { index = index || 0, this.maxCellHeight = index && this.maxCellHeight || 0; var cellX = 0, cell; if (index > 0) { var startCell = this.cells[index - 1]; cellX = startCell.x + startCell.size.outerWidth } for (var len = this.cells.length, i = index; i < len; i++)(cell = this.cells[i]).setPosition(cellX), cellX += cell.size.outerWidth, this.maxCellHeight = Math.max(cell.size.outerHeight, this.maxCellHeight); this.slideableWidth = cellX, this._containCells() }, Flickity.prototype._sizeCells = function (cells) { for (var i = 0, len = cells.length; i < len; i++) { var cell; cells[i].getSize() } }, Flickity.prototype._init = Flickity.prototype.reposition = function () { this.positionCells(), this.positionSliderAtSelected() }, Flickity.prototype.getSize = function () { this.size = getSize(this.element), this.setCellAlign(), this.cursorPosition = this.size.innerWidth * this.cellAlign }; var cellAlignShorthands = { center: { left: .5, right: .5 }, left: { left: 0, right: 1 }, right: { right: 0, left: 1 } }; Flickity.prototype.setCellAlign = function () { var shorthand = cellAlignShorthands[this.options.cellAlign]; this.cellAlign = shorthand ? shorthand[this.originSide] : this.options.cellAlign }, Flickity.prototype.setGallerySize = function () { this.options.setGallerySize && (this.viewport.style.height = this.maxCellHeight + "px") }, Flickity.prototype._getWrapShiftCells = function () { if (this.options.wrapAround) { this._unshiftCells(this.beforeShiftCells), this._unshiftCells(this.afterShiftCells); var gapX = this.cursorPosition, cellIndex = this.cells.length - 1; this.beforeShiftCells = this._getGapCells(gapX, cellIndex, -1), gapX = this.size.innerWidth - this.cursorPosition, this.afterShiftCells = this._getGapCells(gapX, 0, 1) } }, Flickity.prototype._getGapCells = function (gapX, cellIndex, increment) { for (var cells = []; gapX > 0;) { var cell = this.cells[cellIndex]; if (!cell) break; cells.push(cell), cellIndex += increment, gapX -= cell.size.outerWidth } return cells }, Flickity.prototype._containCells = function () { if (this.options.contain && !this.options.wrapAround && this.cells.length) for (var startMargin = this.options.rightToLeft ? "marginRight" : "marginLeft", endMargin = this.options.rightToLeft ? "marginLeft" : "marginRight", firstCellStartMargin = this.cells[0].size[startMargin], lastCell = this.getLastCell(), contentWidth = this.slideableWidth - lastCell.size[endMargin], endLimit = contentWidth - this.size.innerWidth * (1 - this.cellAlign), isContentSmaller = contentWidth < this.size.innerWidth, i = 0, len = this.cells.length; i < len; i++) { var cell = this.cells[i]; cell.setDefaultTarget(), isContentSmaller ? cell.target = contentWidth * this.cellAlign : (cell.target = Math.max(cell.target, this.cursorPosition + firstCellStartMargin), cell.target = Math.min(cell.target, endLimit)) } }, Flickity.prototype.dispatchEvent = function (type, event, args) { var emitArgs = [event].concat(args); if (this.emitEvent(type, emitArgs), jQuery && this.$element) if (event) { var $event = jQuery.Event(event); $event.type = type, this.$element.trigger($event, args) } else this.$element.trigger(type, args) }, Flickity.prototype.select = function (index, isWrap, isInstant) { if (this.isActive) { index = parseInt(index, 10); var len = this.cells.length; this.options.wrapAround && len > 1 && (index < 0 ? this.x -= this.slideableWidth : index >= len && (this.x += this.slideableWidth)), (this.options.wrapAround || isWrap) && (index = utils.modulo(index, len)), this.cells[index] && (this.selectedIndex = index, this.setSelectedCell(), isInstant ? this.positionSliderAtSelected() : this.startAnimation(), this.dispatchEvent("cellSelect")) } }, Flickity.prototype.previous = function (isWrap) { this.select(this.selectedIndex - 1, isWrap) }, Flickity.prototype.next = function (isWrap) { this.select(this.selectedIndex + 1, isWrap) }, Flickity.prototype.setSelectedCell = function () { this._removeSelectedCellClass(), this.selectedCell = this.cells[this.selectedIndex], this.selectedElement = this.selectedCell.element, classie.add(this.selectedElement, "is-selected") }, Flickity.prototype._removeSelectedCellClass = function () { this.selectedCell && classie.remove(this.selectedCell.element, "is-selected") }, Flickity.prototype.getCell = function (elem) { for (var i = 0, len = this.cells.length; i < len; i++) { var cell = this.cells[i]; if (cell.element == elem) return cell } }, Flickity.prototype.getCells = function (elems) { for (var cells = [], i = 0, len = (elems = utils.makeArray(elems)).length; i < len; i++) { var elem = elems[i], cell = this.getCell(elem); cell && cells.push(cell) } return cells }, Flickity.prototype.getCellElements = function () { for (var cellElems = [], i = 0, len = this.cells.length; i < len; i++)cellElems.push(this.cells[i].element); return cellElems }, Flickity.prototype.getParentCell = function (elem) { var cell = this.getCell(elem); return cell || (elem = utils.getParent(elem, ".flickity-slider > *"), this.getCell(elem)) }, Flickity.prototype.getAdjacentCellElements = function (adjCount, index) { if (!adjCount) return [this.selectedElement]; index = void 0 === index ? this.selectedIndex : index; var len = this.cells.length; if (1 + 2 * adjCount >= len) return this.getCellElements(); for (var cellElems = [], i = index - adjCount; i <= index + adjCount; i++) { var cellIndex = this.options.wrapAround ? utils.modulo(i, len) : i, cell = this.cells[cellIndex]; cell && cellElems.push(cell.element) } return cellElems }, Flickity.prototype.uiChange = function () { this.emit("uiChange") }, Flickity.prototype.childUIPointerDown = function (event) { this.emitEvent("childUIPointerDown", [event]) }, Flickity.prototype.onresize = function () { this.watchCSS(), this.resize() }, utils.debounceMethod(Flickity, "onresize", 150), Flickity.prototype.resize = function () { this.isActive && (this.getSize(), this.options.wrapAround && (this.x = utils.modulo(this.x, this.slideableWidth)), this.positionCells(), this._getWrapShiftCells(), this.setGallerySize(), this.positionSliderAtSelected()) }; var supportsConditionalCSS = Flickity.supportsConditionalCSS = function checkSupport() { if (void 0 !== supports) return supports; if (getComputedStyle) { var style = document.createElement("style"), cssText = document.createTextNode('body:after { content: "foo"; display: none; }'); style.appendChild(cssText), document.head.appendChild(style); var afterContent = getComputedStyle(document.body, ":after").content; return supports = -1 != afterContent.indexOf("foo"), document.head.removeChild(style), supports } supports = !1 }, supports; Flickity.prototype.watchCSS = function () { var watchOption = this.options.watchCSS, supports, afterContent, method; watchOption && (supportsConditionalCSS() ? -1 != getComputedStyle(this.element, ":after").content.indexOf("flickity") ? this.activate() : this.deactivate() : this["fallbackOn" == watchOption ? "activate" : "deactivate"]()) }, Flickity.prototype.onkeydown = function (event) { if (this.options.accessibility && (!document.activeElement || document.activeElement == this.element)) if (37 == event.keyCode) { var leftMethod = this.options.rightToLeft ? "next" : "previous"; this.uiChange(), this[leftMethod]() } else if (39 == event.keyCode) { var rightMethod = this.options.rightToLeft ? "previous" : "next"; this.uiChange(), this[rightMethod]() } }, Flickity.prototype.deactivate = function () { if (this.isActive) { classie.remove(this.element, "flickity-enabled"), classie.remove(this.element, "flickity-rtl"); for (var i = 0, len = this.cells.length; i < len; i++) { var cell; this.cells[i].destroy() } this._removeSelectedCellClass(), this.element.removeChild(this.viewport), moveElements(this.slider.children, this.element), this.options.accessibility && (this.element.removeAttribute("tabIndex"), eventie.unbind(this.element, "keydown", this)), this.isActive = !1, this.emit("deactivate") } }, Flickity.prototype.destroy = function () { this.deactivate(), this.isResizeBound && eventie.unbind(window, "resize", this), this.emit("destroy"), jQuery && this.$element && jQuery.removeData(this.element, "flickity"), delete this.element.flickityGUID, delete instances[this.guid] }, utils.extend(Flickity.prototype, animatePrototype); var isIE8 = "attachEvent" in window; return Flickity.setUnselectable = function (elem) { isIE8 && elem.setAttribute("unselectable", "on") }, Flickity.data = function (elem) { var id = (elem = utils.getQueryElement(elem)) && elem.flickityGUID; return id && instances[id] }, utils.htmlInit(Flickity, "flickity"), jQuery && jQuery.bridget && jQuery.bridget("flickity", Flickity), Flickity.Cell = Cell, Flickity })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("unipointer/unipointer", ["eventEmitter/EventEmitter", "eventie/eventie"], (function (EventEmitter, eventie) { return factory(window, EventEmitter, eventie) })) : "object" == typeof exports ? module.exports = factory(window, require("wolfy87-eventemitter"), require("eventie")) : window.Unipointer = factory(window, window.EventEmitter, window.eventie) }(window, (function factory(window, EventEmitter, eventie) { function noop() { } function Unipointer() { } Unipointer.prototype = new EventEmitter, Unipointer.prototype.bindStartEvent = function (elem) { this._bindStartEvent(elem, !0) }, Unipointer.prototype.unbindStartEvent = function (elem) { this._bindStartEvent(elem, !1) }, Unipointer.prototype._bindStartEvent = function (elem, isBind) { var bindMethod = (isBind = void 0 === isBind || !!isBind) ? "bind" : "unbind"; window.navigator.pointerEnabled ? eventie[bindMethod](elem, "pointerdown", this) : window.navigator.msPointerEnabled ? eventie[bindMethod](elem, "MSPointerDown", this) : (eventie[bindMethod](elem, "mousedown", this), eventie[bindMethod](elem, "touchstart", this)) }, Unipointer.prototype.handleEvent = function (event) { var method = "on" + event.type; this[method] && this[method](event) }, Unipointer.prototype.getTouch = function (touches) { for (var i = 0, len = touches.length; i < len; i++) { var touch = touches[i]; if (touch.identifier == this.pointerIdentifier) return touch } }, Unipointer.prototype.onmousedown = function (event) { var button = event.button; button && 0 !== button && 1 !== button || this._pointerDown(event, event) }, Unipointer.prototype.ontouchstart = function (event) { this._pointerDown(event, event.changedTouches[0]) }, Unipointer.prototype.onMSPointerDown = Unipointer.prototype.onpointerdown = function (event) { this._pointerDown(event, event) }, Unipointer.prototype._pointerDown = function (event, pointer) { this.isPointerDown || (this.isPointerDown = !0, this.pointerIdentifier = void 0 !== pointer.pointerId ? pointer.pointerId : pointer.identifier, this.pointerDown(event, pointer)) }, Unipointer.prototype.pointerDown = function (event, pointer) { this._bindPostStartEvents(event), this.emitEvent("pointerDown", [event, pointer]) }; var postStartEvents = { mousedown: ["mousemove", "mouseup"], touchstart: ["touchmove", "touchend", "touchcancel"], pointerdown: ["pointermove", "pointerup", "pointercancel"], MSPointerDown: ["MSPointerMove", "MSPointerUp", "MSPointerCancel"] }; return Unipointer.prototype._bindPostStartEvents = function (event) { if (event) { for (var events = postStartEvents[event.type], node = event.preventDefault ? window : document, i = 0, len = events.length; i < len; i++) { var evnt = events[i]; eventie.bind(node, evnt, this) } this._boundPointerEvents = { events: events, node: node } } }, Unipointer.prototype._unbindPostStartEvents = function () { var args = this._boundPointerEvents; if (args && args.events) { for (var i = 0, len = args.events.length; i < len; i++) { var event = args.events[i]; eventie.unbind(args.node, event, this) } delete this._boundPointerEvents } }, Unipointer.prototype.onmousemove = function (event) { this._pointerMove(event, event) }, Unipointer.prototype.onMSPointerMove = Unipointer.prototype.onpointermove = function (event) { event.pointerId == this.pointerIdentifier && this._pointerMove(event, event) }, Unipointer.prototype.ontouchmove = function (event) { var touch = this.getTouch(event.changedTouches); touch && this._pointerMove(event, touch) }, Unipointer.prototype._pointerMove = function (event, pointer) { this.pointerMove(event, pointer) }, Unipointer.prototype.pointerMove = function (event, pointer) { this.emitEvent("pointerMove", [event, pointer]) }, Unipointer.prototype.onmouseup = function (event) { this._pointerUp(event, event) }, Unipointer.prototype.onMSPointerUp = Unipointer.prototype.onpointerup = function (event) { event.pointerId == this.pointerIdentifier && this._pointerUp(event, event) }, Unipointer.prototype.ontouchend = function (event) { var touch = this.getTouch(event.changedTouches); touch && this._pointerUp(event, touch) }, Unipointer.prototype._pointerUp = function (event, pointer) { this._pointerDone(), this.pointerUp(event, pointer) }, Unipointer.prototype.pointerUp = function (event, pointer) { this.emitEvent("pointerUp", [event, pointer]) }, Unipointer.prototype._pointerDone = function () { this.isPointerDown = !1, delete this.pointerIdentifier, this._unbindPostStartEvents(), this.pointerDone() }, Unipointer.prototype.pointerDone = noop, Unipointer.prototype.onMSPointerCancel = Unipointer.prototype.onpointercancel = function (event) { event.pointerId == this.pointerIdentifier && this._pointerCancel(event, event) }, Unipointer.prototype.ontouchcancel = function (event) { var touch = this.getTouch(event.changedTouches); touch && this._pointerCancel(event, touch) }, Unipointer.prototype._pointerCancel = function (event, pointer) { this._pointerDone(), this.pointerCancel(event, pointer) }, Unipointer.prototype.pointerCancel = function (event, pointer) { this.emitEvent("pointerCancel", [event, pointer]) }, Unipointer.getPointerPoint = function (pointer) { return { x: void 0 !== pointer.pageX ? pointer.pageX : pointer.clientX, y: void 0 !== pointer.pageY ? pointer.pageY : pointer.clientY } }, Unipointer })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("unidragger/unidragger", ["eventie/eventie", "unipointer/unipointer"], (function (eventie, Unipointer) { return factory(window, eventie, Unipointer) })) : "object" == typeof exports ? module.exports = factory(window, require("eventie"), require("unipointer")) : window.Unidragger = factory(window, window.eventie, window.Unipointer) }(window, (function factory(window, eventie, Unipointer) { function noop() { } function preventDefaultEvent(event) { event.preventDefault ? event.preventDefault() : event.returnValue = !1 } function Unidragger() { } Unidragger.prototype = new Unipointer, Unidragger.prototype.bindHandles = function () { this._bindHandles(!0) }, Unidragger.prototype.unbindHandles = function () { this._bindHandles(!1) }; var navigator = window.navigator; function noDragStart() { return !1 } Unidragger.prototype._bindHandles = function (isBind) { var binderExtra; isBind = void 0 === isBind || !!isBind, binderExtra = navigator.pointerEnabled ? function (handle) { handle.style.touchAction = isBind ? "none" : "" } : navigator.msPointerEnabled ? function (handle) { handle.style.msTouchAction = isBind ? "none" : "" } : function () { isBind && disableImgOndragstart(handle) }; for (var bindMethod = isBind ? "bind" : "unbind", i = 0, len = this.handles.length; i < len; i++) { var handle = this.handles[i]; this._bindStartEvent(handle, isBind), binderExtra(handle), eventie[bindMethod](handle, "click", this) } }; var isIE8, disableImgOndragstart = "attachEvent" in document.documentElement ? function (handle) { "IMG" == handle.nodeName && (handle.ondragstart = noDragStart); for (var images = handle.querySelectorAll("img"), i = 0, len = images.length; i < len; i++) { var img; images[i].ondragstart = noDragStart } } : noop; Unidragger.prototype.pointerDown = function (event, pointer) { if ("INPUT" == event.target.nodeName && "range" == event.target.type) return this.isPointerDown = !1, void delete this.pointerIdentifier; this._dragPointerDown(event, pointer); var focused = document.activeElement; focused && focused.blur && focused.blur(), this._bindPostStartEvents(event), this.pointerDownScroll = Unidragger.getScrollPosition(), eventie.bind(window, "scroll", this), this.emitEvent("pointerDown", [event, pointer]) }, Unidragger.prototype._dragPointerDown = function (event, pointer) { this.pointerDownPoint = Unipointer.getPointerPoint(pointer); var isTouchstart = "touchstart" == event.type, targetNodeName = event.target.nodeName; isTouchstart || "SELECT" == targetNodeName || preventDefaultEvent(event) }, Unidragger.prototype.pointerMove = function (event, pointer) { var moveVector = this._dragPointerMove(event, pointer); this.emitEvent("pointerMove", [event, pointer, moveVector]), this._dragMove(event, pointer, moveVector) }, Unidragger.prototype._dragPointerMove = function (event, pointer) { var movePoint = Unipointer.getPointerPoint(pointer), moveVector = { x: movePoint.x - this.pointerDownPoint.x, y: movePoint.y - this.pointerDownPoint.y }; return !this.isDragging && this.hasDragStarted(moveVector) && this._dragStart(event, pointer), moveVector }, Unidragger.prototype.hasDragStarted = function (moveVector) { return Math.abs(moveVector.x) > 3 || Math.abs(moveVector.y) > 3 }, Unidragger.prototype.pointerUp = function (event, pointer) { this.emitEvent("pointerUp", [event, pointer]), this._dragPointerUp(event, pointer) }, Unidragger.prototype._dragPointerUp = function (event, pointer) { this.isDragging ? this._dragEnd(event, pointer) : this._staticClick(event, pointer) }, Unidragger.prototype.pointerDone = function () { eventie.unbind(window, "scroll", this) }, Unidragger.prototype._dragStart = function (event, pointer) { this.isDragging = !0, this.dragStartPoint = Unidragger.getPointerPoint(pointer), this.isPreventingClicks = !0, this.dragStart(event, pointer) }, Unidragger.prototype.dragStart = function (event, pointer) { this.emitEvent("dragStart", [event, pointer]) }, Unidragger.prototype._dragMove = function (event, pointer, moveVector) { this.isDragging && this.dragMove(event, pointer, moveVector) }, Unidragger.prototype.dragMove = function (event, pointer, moveVector) { preventDefaultEvent(event), this.emitEvent("dragMove", [event, pointer, moveVector]) }, Unidragger.prototype._dragEnd = function (event, pointer) { this.isDragging = !1; var _this = this; setTimeout((function () { delete _this.isPreventingClicks })), this.dragEnd(event, pointer) }, Unidragger.prototype.dragEnd = function (event, pointer) { this.emitEvent("dragEnd", [event, pointer]) }, Unidragger.prototype.pointerDone = function () { eventie.unbind(window, "scroll", this), delete this.pointerDownScroll }, Unidragger.prototype.onclick = function (event) { this.isPreventingClicks && preventDefaultEvent(event) }, Unidragger.prototype._staticClick = function (event, pointer) { if (!this.isIgnoringMouseUp || "mouseup" != event.type) { var nodeName = event.target.nodeName; if ("INPUT" != nodeName && "TEXTAREA" != nodeName || event.target.focus(), this.staticClick(event, pointer), "mouseup" != event.type) { this.isIgnoringMouseUp = !0; var _this = this; setTimeout((function () { delete _this.isIgnoringMouseUp }), 400) } } }, Unidragger.prototype.staticClick = function (event, pointer) { this.emitEvent("staticClick", [event, pointer]) }, Unidragger.prototype.onscroll = function () { var scroll = Unidragger.getScrollPosition(), scrollMoveX = this.pointerDownScroll.x - scroll.x, scrollMoveY = this.pointerDownScroll.y - scroll.y; (Math.abs(scrollMoveX) > 3 || Math.abs(scrollMoveY) > 3) && this._pointerDone() }, Unidragger.getPointerPoint = function (pointer) { return { x: void 0 !== pointer.pageX ? pointer.pageX : pointer.clientX, y: void 0 !== pointer.pageY ? pointer.pageY : pointer.clientY } }; var isPageOffset = void 0 !== window.pageYOffset; return Unidragger.getScrollPosition = function () { return { x: isPageOffset ? window.pageXOffset : document.body.scrollLeft, y: isPageOffset ? window.pageYOffset : document.body.scrollTop } }, Unidragger.getPointerPoint = Unipointer.getPointerPoint, Unidragger })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("flickity/js/drag", ["classie/classie", "eventie/eventie", "./flickity", "unidragger/unidragger", "fizzy-ui-utils/utils"], (function (classie, eventie, Flickity, Unidragger, utils) { return factory(window, classie, eventie, Flickity, Unidragger, utils) })) : "object" == typeof exports ? module.exports = factory(window, require("desandro-classie"), require("eventie"), require("./flickity"), require("unidragger"), require("fizzy-ui-utils")) : window.Flickity = factory(window, window.classie, window.eventie, window.Flickity, window.Unidragger, window.fizzyUIUtils) }(window, (function factory(window, classie, eventie, Flickity, Unidragger, utils) { function preventDefaultEvent(event) { event.preventDefault ? event.preventDefault() : event.returnValue = !1 } utils.extend(Flickity.defaults, { draggable: !0 }), Flickity.createMethods.push("_createDrag"), utils.extend(Flickity.prototype, Unidragger.prototype), Flickity.prototype._createDrag = function () { this.on("activate", this.bindDrag), this.on("uiChange", this._uiChangeDrag), this.on("childUIPointerDown", this._childUIPointerDownDrag), this.on("deactivate", this.unbindDrag) }, Flickity.prototype.bindDrag = function () { this.options.draggable && !this.isDragBound && (classie.add(this.element, "is-draggable"), this.handles = [this.viewport], this.bindHandles(), this.isDragBound = !0) }, Flickity.prototype.unbindDrag = function () { this.isDragBound && (classie.remove(this.element, "is-draggable"), this.unbindHandles(), delete this.isDragBound) }, Flickity.prototype._uiChangeDrag = function () { delete this.isFreeScrolling }, Flickity.prototype._childUIPointerDownDrag = function (event) { preventDefaultEvent(event), this.pointerDownFocus(event) }, Flickity.prototype.pointerDown = function (event, pointer) { if ("INPUT" == event.target.nodeName && "range" == event.target.type) return this.isPointerDown = !1, void delete this.pointerIdentifier; this._dragPointerDown(event, pointer); var focused = document.activeElement; focused && focused.blur && focused != this.element && focused != document.body && focused.blur(), this.pointerDownFocus(event), this.dragX = this.x, classie.add(this.viewport, "is-pointer-down"), this._bindPostStartEvents(event), this.pointerDownScroll = Unidragger.getScrollPosition(), eventie.bind(window, "scroll", this), this.dispatchEvent("pointerDown", event, [pointer]) }; var touchStartEvents = { touchstart: !0, MSPointerDown: !0 }, focusNodes = { INPUT: !0, SELECT: !0 }; return Flickity.prototype.pointerDownFocus = function (event) { if (this.options.accessibility && !touchStartEvents[event.type] && !focusNodes[event.target.nodeName]) { var prevScrollY = window.pageYOffset; this.element.focus(), window.pageYOffset != prevScrollY && window.scrollTo(window.pageXOffset, prevScrollY) } }, Flickity.prototype.hasDragStarted = function (moveVector) { return Math.abs(moveVector.x) > 3 }, Flickity.prototype.pointerUp = function (event, pointer) { classie.remove(this.viewport, "is-pointer-down"), this.dispatchEvent("pointerUp", event, [pointer]), this._dragPointerUp(event, pointer) }, Flickity.prototype.pointerDone = function () { eventie.unbind(window, "scroll", this), delete this.pointerDownScroll }, Flickity.prototype.dragStart = function (event, pointer) { this.dragStartPosition = this.x, this.startAnimation(), this.dispatchEvent("dragStart", event, [pointer]) }, Flickity.prototype.dragMove = function (event, pointer, moveVector) { preventDefaultEvent(event), this.previousDragX = this.dragX; var direction = this.options.rightToLeft ? -1 : 1, dragX = this.dragStartPosition + moveVector.x * direction; if (!this.options.wrapAround && this.cells.length) { var originBound = Math.max(-this.cells[0].target, this.dragStartPosition); dragX = dragX > originBound ? .5 * (dragX + originBound) : dragX; var endBound = Math.min(-this.getLastCell().target, this.dragStartPosition); dragX = dragX < endBound ? .5 * (dragX + endBound) : dragX } this.dragX = dragX, this.dragMoveTime = new Date, this.dispatchEvent("dragMove", event, [pointer, moveVector]) }, Flickity.prototype.dragEnd = function (event, pointer) { this.options.freeScroll && (this.isFreeScrolling = !0); var index = this.dragEndRestingSelect(); if (this.options.freeScroll && !this.options.wrapAround) { var restingX = this.getRestingPosition(); this.isFreeScrolling = -restingX > this.cells[0].target && -restingX < this.getLastCell().target } else this.options.freeScroll || index != this.selectedIndex || (index += this.dragEndBoostSelect()); delete this.previousDragX, this.select(index), this.dispatchEvent("dragEnd", event, [pointer]) }, Flickity.prototype.dragEndRestingSelect = function () { var restingX = this.getRestingPosition(), distance = Math.abs(this.getCellDistance(-restingX, this.selectedIndex)), positiveResting = this._getClosestResting(restingX, distance, 1), negativeResting = this._getClosestResting(restingX, distance, -1), index; return positiveResting.distance < negativeResting.distance ? positiveResting.index : negativeResting.index }, Flickity.prototype._getClosestResting = function (restingX, distance, increment) { for (var index = this.selectedIndex, minDistance = 1 / 0, condition = this.options.contain && !this.options.wrapAround ? function (d, md) { return d <= md } : function (d, md) { return d < md }; condition(distance, minDistance) && (index += increment, minDistance = distance, null !== (distance = this.getCellDistance(-restingX, index)));)distance = Math.abs(distance); return { distance: minDistance, index: index - increment } }, Flickity.prototype.getCellDistance = function (x, index) { var len = this.cells.length, isWrapAround = this.options.wrapAround && len > 1, cellIndex = isWrapAround ? utils.modulo(index, len) : index, cell = this.cells[cellIndex]; if (!cell) return null; var wrap = isWrapAround ? this.slideableWidth * Math.floor(index / len) : 0; return x - (cell.target + wrap) }, Flickity.prototype.dragEndBoostSelect = function () { if (void 0 === this.previousDragX || !this.dragMoveTime || new Date - this.dragMoveTime > 100) return 0; var distance = this.getCellDistance(-this.dragX, this.selectedIndex), delta = this.previousDragX - this.dragX; return distance > 0 && delta > 0 ? 1 : distance < 0 && delta < 0 ? -1 : 0 }, Flickity.prototype.staticClick = function (event, pointer) { var clickedCell = this.getParentCell(event.target), cellElem = clickedCell && clickedCell.element, cellIndex = clickedCell && utils.indexOf(this.cells, clickedCell); this.dispatchEvent("staticClick", event, [pointer, cellElem, cellIndex]) }, Flickity })), function (window, factory) { "function" == typeof define && define.amd ? define("tap-listener/tap-listener", ["unipointer/unipointer"], (function (Unipointer) { return factory(window, Unipointer) })) : "object" == typeof exports ? module.exports = factory(window, require("unipointer")) : window.TapListener = factory(window, window.Unipointer) }(window, (function factory(window, Unipointer) { function TapListener(elem) { this.bindTap(elem) } TapListener.prototype = new Unipointer, TapListener.prototype.bindTap = function (elem) { elem && (this.unbindTap(), this.tapElement = elem, this._bindStartEvent(elem, !0)) }, TapListener.prototype.unbindTap = function () { this.tapElement && (this._bindStartEvent(this.tapElement, !0), delete this.tapElement) }; var isPageOffset = void 0 !== window.pageYOffset; return TapListener.prototype.pointerUp = function (event, pointer) { if (!this.isIgnoringMouseUp || "mouseup" != event.type) { var pointerPoint = Unipointer.getPointerPoint(pointer), boundingRect = this.tapElement.getBoundingClientRect(), scrollX = isPageOffset ? window.pageXOffset : document.body.scrollLeft, scrollY = isPageOffset ? window.pageYOffset : document.body.scrollTop, isInside; pointerPoint.x >= boundingRect.left + scrollX && pointerPoint.x <= boundingRect.right + scrollX && pointerPoint.y >= boundingRect.top + scrollY && pointerPoint.y <= boundingRect.bottom + scrollY && this.emitEvent("tap", [event, pointer]), "mouseup" != event.type && (this.isIgnoringMouseUp = !0, setTimeout(function () { delete this.isIgnoringMouseUp }.bind(this), 320)) } }, TapListener.prototype.destroy = function () { this.pointerDone(), this.unbindTap() }, TapListener })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("flickity/js/prev-next-button", ["eventie/eventie", "./flickity", "tap-listener/tap-listener", "fizzy-ui-utils/utils"], (function (eventie, Flickity, TapListener, utils) { return factory(window, eventie, Flickity, TapListener, utils) })) : "object" == typeof exports ? module.exports = factory(window, require("eventie"), require("./flickity"), require("tap-listener"), require("fizzy-ui-utils")) : factory(window, window.eventie, window.Flickity, window.TapListener, window.fizzyUIUtils) }(window, (function factory(window, eventie, Flickity, TapListener, utils) { var svgURI = "http://www.w3.org/2000/svg", supportsInlineSVG = function () { var supports; function checkSupport() { if (void 0 !== supports) return supports; var div = document.createElement("div"); return div.innerHTML = "<svg/>", supports = (div.firstChild && div.firstChild.namespaceURI) == svgURI } return checkSupport }(); function PrevNextButton(direction, parent) { this.direction = direction, this.parent = parent, this._create() } function getArrowMovements(shape) { return "string" == typeof shape ? shape : "M " + shape.x0 + "," + shape.y0 + " L " + shape.x1 + "," + shape.y1 + " L " + shape.x2 + "," + shape.y2 } return PrevNextButton.prototype = new TapListener, PrevNextButton.prototype._create = function () { this.isEnabled = !0, this.isPrevious = -1 == this.direction; var leftDirection = this.parent.options.rightToLeft ? 1 : -1; this.isLeft = this.direction == leftDirection; var element = this.element = document.createElement("button"); if (element.className = "flickity-prev-next-button", element.className += this.isPrevious ? " previous" : " next", element.setAttribute("type", "button"), this.disable(), element.setAttribute("aria-label", this.isPrevious ? "previous" : "next"), Flickity.setUnselectable(element), supportsInlineSVG()) { var svg = this.createSVG(); element.appendChild(svg) } else this.setArrowText(), element.className += " no-svg"; var _this = this; this.onCellSelect = function () { _this.update() }, this.parent.on("cellSelect", this.onCellSelect), this.on("tap", this.onTap), this.on("pointerDown", (function onPointerDown(button, event) { _this.parent.childUIPointerDown(event) })) }, PrevNextButton.prototype.activate = function () { this.bindTap(this.element), eventie.bind(this.element, "click", this), this.parent.element.appendChild(this.element) }, PrevNextButton.prototype.deactivate = function () { this.parent.element.removeChild(this.element), TapListener.prototype.destroy.call(this), eventie.unbind(this.element, "click", this) }, PrevNextButton.prototype.createSVG = function () { var svg = document.createElementNS(svgURI, "svg"); svg.setAttribute("viewBox", "0 0 50 100"); var path = document.createElementNS(svgURI, "path"), pathMovements = getArrowMovements(this.parent.options.arrowShape); return path.setAttribute("d", pathMovements), path.setAttribute("class", "arrow"), svg.appendChild(path), svg }, PrevNextButton.prototype.setArrowText = function () { var parentOptions = this.parent.options, arrowText = this.isLeft ? parentOptions.leftArrowText : parentOptions.rightArrowText; utils.setText(this.element, arrowText) }, PrevNextButton.prototype.onTap = function () { if (this.isEnabled) { this.parent.uiChange(); var method = this.isPrevious ? "previous" : "next"; this.parent[method]() } }, PrevNextButton.prototype.handleEvent = utils.handleEvent, PrevNextButton.prototype.onclick = function () { var focused = document.activeElement; focused && focused == this.element && this.onTap() }, PrevNextButton.prototype.enable = function () { this.isEnabled || (this.element.disabled = !1, this.isEnabled = !0) }, PrevNextButton.prototype.disable = function () { this.isEnabled && (this.element.disabled = !0, this.isEnabled = !1) }, PrevNextButton.prototype.update = function () { var cells = this.parent.cells; if (this.parent.options.wrapAround && cells.length > 1) this.enable(); else { var lastIndex = cells.length ? cells.length - 1 : 0, boundIndex = this.isPrevious ? 0 : lastIndex, method; this[this.parent.selectedIndex == boundIndex ? "disable" : "enable"]() } }, PrevNextButton.prototype.destroy = function () { this.deactivate() }, utils.extend(Flickity.defaults, { prevNextButtons: !0, leftArrowText: "â€¹", rightArrowText: "â€º", arrowShape: { x0: 0, y0: 50, x1: 50, y1: 0, x2: 50, y2: 100 } }), Flickity.createMethods.push("_createPrevNextButtons"), Flickity.prototype._createPrevNextButtons = function () { this.options.prevNextButtons && (this.prevButton = new PrevNextButton(-1, this), this.nextButton = new PrevNextButton(1, this), this.on("activate", this.activatePrevNextButtons)) }, Flickity.prototype.activatePrevNextButtons = function () { this.prevButton.activate(), this.nextButton.activate(), this.on("deactivate", this.deactivatePrevNextButtons) }, Flickity.prototype.deactivatePrevNextButtons = function () { this.prevButton.deactivate(), this.nextButton.deactivate(), this.off("deactivate", this.deactivatePrevNextButtons) }, Flickity.PrevNextButton = PrevNextButton, Flickity })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("flickity/js/page-dots", ["eventie/eventie", "./flickity", "tap-listener/tap-listener", "fizzy-ui-utils/utils"], (function (eventie, Flickity, TapListener, utils) { return factory(window, eventie, Flickity, TapListener, utils) })) : "object" == typeof exports ? module.exports = factory(window, require("eventie"), require("./flickity"), require("tap-listener"), require("fizzy-ui-utils")) : factory(window, window.eventie, window.Flickity, window.TapListener, window.fizzyUIUtils) }(window, (function factory(window, eventie, Flickity, TapListener, utils) { function PageDots(parent) { this.parent = parent, this._create() } return PageDots.prototype = new TapListener, PageDots.prototype._create = function () { this.holder = document.createElement("ol"), this.holder.className = "flickity-page-dots", Flickity.setUnselectable(this.holder), this.dots = []; var _this = this; this.onCellSelect = function () { _this.updateSelected() }, this.parent.on("cellSelect", this.onCellSelect), this.on("tap", this.onTap), this.on("pointerDown", (function onPointerDown(button, event) { _this.parent.childUIPointerDown(event) })) }, PageDots.prototype.activate = function () { this.setDots(), this.bindTap(this.holder), this.parent.element.appendChild(this.holder) }, PageDots.prototype.deactivate = function () { this.parent.element.removeChild(this.holder), TapListener.prototype.destroy.call(this) }, PageDots.prototype.setDots = function () { var delta = this.parent.cells.length - this.dots.length; delta > 0 ? this.addDots(delta) : delta < 0 && this.removeDots(-delta) }, PageDots.prototype.addDots = function (count) { for (var fragment = document.createDocumentFragment(), newDots = []; count;) { var dot = document.createElement("li"); dot.className = "dot", fragment.appendChild(dot), newDots.push(dot), count-- } this.holder.appendChild(fragment), this.dots = this.dots.concat(newDots) }, PageDots.prototype.removeDots = function (count) { for (var removeDots = this.dots.splice(this.dots.length - count, count), i = 0, len = removeDots.length; i < len; i++) { var dot = removeDots[i]; this.holder.removeChild(dot) } }, PageDots.prototype.updateSelected = function () { this.selectedDot && (this.selectedDot.className = "dot"), this.dots.length && (this.selectedDot = this.dots[this.parent.selectedIndex], this.selectedDot.className = "dot is-selected") }, PageDots.prototype.onTap = function (event) { var target = event.target; if ("LI" == target.nodeName) { this.parent.uiChange(); var index = utils.indexOf(this.dots, target); this.parent.select(index) } }, PageDots.prototype.destroy = function () { this.deactivate() }, Flickity.PageDots = PageDots, utils.extend(Flickity.defaults, { pageDots: !0 }), Flickity.createMethods.push("_createPageDots"), Flickity.prototype._createPageDots = function () { this.options.pageDots && (this.pageDots = new PageDots(this), this.on("activate", this.activatePageDots), this.on("cellAddedRemoved", this.onCellAddedRemovedPageDots), this.on("deactivate", this.deactivatePageDots)) }, Flickity.prototype.activatePageDots = function () { this.pageDots.activate() }, Flickity.prototype.onCellAddedRemovedPageDots = function () { this.pageDots.setDots() }, Flickity.prototype.deactivatePageDots = function () { this.pageDots.deactivate() }, Flickity.PageDots = PageDots, Flickity })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("flickity/js/player", ["eventEmitter/EventEmitter", "eventie/eventie", "fizzy-ui-utils/utils", "./flickity"], (function (EventEmitter, eventie, utils, Flickity) { return factory(EventEmitter, eventie, utils, Flickity) })) : "object" == typeof exports ? module.exports = factory(require("wolfy87-eventemitter"), require("eventie"), require("fizzy-ui-utils"), require("./flickity")) : factory(window.EventEmitter, window.eventie, window.fizzyUIUtils, window.Flickity) }(window, (function factory(EventEmitter, eventie, utils, Flickity) { var hiddenProperty, visibilityEvent; function Player(parent) { if (this.parent = parent, this.state = "stopped", visibilityEvent) { var _this = this; this.onVisibilityChange = function () { _this.visibilityChange() } } } return "hidden" in document ? (hiddenProperty = "hidden", visibilityEvent = "visibilitychange") : "webkitHidden" in document && (hiddenProperty = "webkitHidden", visibilityEvent = "webkitvisibilitychange"), Player.prototype = new EventEmitter, Player.prototype.play = function () { "playing" != this.state && (this.state = "playing", visibilityEvent && document.addEventListener(visibilityEvent, this.onVisibilityChange, !1), this.tick()) }, Player.prototype.tick = function () { if ("playing" == this.state) { var time = this.parent.options.autoPlay; time = "number" == typeof time ? time : 3e3; var _this = this; this.clear(), this.timeout = setTimeout((function () { _this.parent.next(!0), _this.tick() }), time) } }, Player.prototype.stop = function () { this.state = "stopped", this.clear(), visibilityEvent && document.removeEventListener(visibilityEvent, this.onVisibilityChange, !1) }, Player.prototype.clear = function () { clearTimeout(this.timeout) }, Player.prototype.pause = function () { "playing" == this.state && (this.state = "paused", this.clear()) }, Player.prototype.unpause = function () { "paused" == this.state && this.play() }, Player.prototype.visibilityChange = function () { var isHidden; this[document[hiddenProperty] ? "pause" : "unpause"]() }, utils.extend(Flickity.defaults, { pauseAutoPlayOnHover: !0 }), Flickity.createMethods.push("_createPlayer"), Flickity.prototype._createPlayer = function () { this.player = new Player(this), this.on("activate", this.activatePlayer), this.on("uiChange", this.stopPlayer), this.on("pointerDown", this.stopPlayer), this.on("deactivate", this.deactivatePlayer) }, Flickity.prototype.activatePlayer = function () { this.options.autoPlay && (this.player.play(), eventie.bind(this.element, "mouseenter", this), this.isMouseenterBound = !0) }, Flickity.prototype.playPlayer = function () { this.player.play() }, Flickity.prototype.stopPlayer = function () { this.player.stop() }, Flickity.prototype.pausePlayer = function () { this.player.pause() }, Flickity.prototype.unpausePlayer = function () { this.player.unpause() }, Flickity.prototype.deactivatePlayer = function () { this.player.stop(), this.isMouseenterBound && (eventie.unbind(this.element, "mouseenter", this), delete this.isMouseenterBound) }, Flickity.prototype.onmouseenter = function () { this.options.pauseAutoPlayOnHover && (this.player.pause(), eventie.bind(this.element, "mouseleave", this)) }, Flickity.prototype.onmouseleave = function () { this.player.unpause(), eventie.unbind(this.element, "mouseleave", this) }, Flickity.Player = Player, Flickity })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("flickity/js/add-remove-cell", ["./flickity", "fizzy-ui-utils/utils"], (function (Flickity, utils) { return factory(window, Flickity, utils) })) : "object" == typeof exports ? module.exports = factory(window, require("./flickity"), require("fizzy-ui-utils")) : factory(window, window.Flickity, window.fizzyUIUtils) }(window, (function factory(window, Flickity, utils) { function getCellsFragment(cells) { for (var fragment = document.createDocumentFragment(), i = 0, len = cells.length; i < len; i++) { var cell = cells[i]; fragment.appendChild(cell.element) } return fragment } return Flickity.prototype.insert = function (elems, index) { var cells = this._makeCells(elems); if (cells && cells.length) { var len = this.cells.length; index = void 0 === index ? len : index; var fragment = getCellsFragment(cells), isAppend = index == len; if (isAppend) this.slider.appendChild(fragment); else { var insertCellElement = this.cells[index].element; this.slider.insertBefore(fragment, insertCellElement) } if (0 === index) this.cells = cells.concat(this.cells); else if (isAppend) this.cells = this.cells.concat(cells); else { var endCells = this.cells.splice(index, len - index); this.cells = this.cells.concat(cells).concat(endCells) } this._sizeCells(cells); var selectedIndexDelta = index > this.selectedIndex ? 0 : cells.length; this._cellAddedRemoved(index, selectedIndexDelta) } }, Flickity.prototype.append = function (elems) { this.insert(elems, this.cells.length) }, Flickity.prototype.prepend = function (elems) { this.insert(elems, 0) }, Flickity.prototype.remove = function (elems) { var cells = this.getCells(elems), selectedIndexDelta = 0, i, len, cell; for (i = 0, len = cells.length; i < len; i++) { var wasBefore; cell = cells[i], selectedIndexDelta -= utils.indexOf(this.cells, cell) < this.selectedIndex ? 1 : 0 } for (i = 0, len = cells.length; i < len; i++)(cell = cells[i]).remove(), utils.removeFrom(this.cells, cell); cells.length && this._cellAddedRemoved(0, selectedIndexDelta) }, Flickity.prototype._cellAddedRemoved = function (changedCellIndex, selectedIndexDelta) { selectedIndexDelta = selectedIndexDelta || 0, this.selectedIndex += selectedIndexDelta, this.selectedIndex = Math.max(0, Math.min(this.cells.length - 1, this.selectedIndex)), this.emitEvent("cellAddedRemoved", [changedCellIndex, selectedIndexDelta]), this.cellChange(changedCellIndex, !0) }, Flickity.prototype.cellSizeChange = function (elem) { var cell = this.getCell(elem); if (cell) { cell.getSize(); var index = utils.indexOf(this.cells, cell); this.cellChange(index) } }, Flickity.prototype.cellChange = function (changedCellIndex, isPositioningSlider) { var prevSlideableWidth = this.slideableWidth; if (this._positionCells(changedCellIndex), this._getWrapShiftCells(), this.setGallerySize(), this.options.freeScroll) { var deltaX = prevSlideableWidth - this.slideableWidth; this.x += deltaX * this.cellAlign, this.positionSlider() } else isPositioningSlider && this.positionSliderAtSelected(), this.select(this.selectedIndex) }, Flickity })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("flickity/js/lazyload", ["classie/classie", "eventie/eventie", "./flickity", "fizzy-ui-utils/utils"], (function (classie, eventie, Flickity, utils) { return factory(window, classie, eventie, Flickity, utils) })) : "object" == typeof exports ? module.exports = factory(window, require("desandro-classie"), require("eventie"), require("./flickity"), require("fizzy-ui-utils")) : factory(window, window.classie, window.eventie, window.Flickity, window.fizzyUIUtils) }(window, (function factory(window, classie, eventie, Flickity, utils) { "use strict"; function getCellLazyImages(cellElem) { if ("IMG" == cellElem.nodeName && cellElem.getAttribute("data-flickity-lazyload")) return [cellElem]; var imgs = cellElem.querySelectorAll("img[data-flickity-lazyload]"); return utils.makeArray(imgs) } function LazyLoader(img, flickity) { this.img = img, this.flickity = flickity, this.load() } return Flickity.createMethods.push("_createLazyload"), Flickity.prototype._createLazyload = function () { this.on("cellSelect", this.lazyLoad) }, Flickity.prototype.lazyLoad = function () { var lazyLoad = this.options.lazyLoad; if (lazyLoad) { for (var adjCount = "number" == typeof lazyLoad ? lazyLoad : 0, cellElems = this.getAdjacentCellElements(adjCount), lazyImages = [], i = 0, len = cellElems.length; i < len; i++) { var cellElem, lazyCellImages = getCellLazyImages(cellElems[i]); lazyImages = lazyImages.concat(lazyCellImages) } for (i = 0, len = lazyImages.length; i < len; i++) { var img; new LazyLoader(lazyImages[i], this) } } }, LazyLoader.prototype.handleEvent = utils.handleEvent, LazyLoader.prototype.load = function () { eventie.bind(this.img, "load", this), eventie.bind(this.img, "error", this), this.img.src = this.img.getAttribute("data-flickity-lazyload"), this.img.removeAttribute("data-flickity-lazyload") }, LazyLoader.prototype.onload = function (event) { this.complete(event, "flickity-lazyloaded") }, LazyLoader.prototype.onerror = function (event) { this.complete(event, "flickity-lazyerror") }, LazyLoader.prototype.complete = function (event, className) { eventie.unbind(this.img, "load", this), eventie.unbind(this.img, "error", this); var cell = this.flickity.getParentCell(this.img), cellElem = cell && cell.element; this.flickity.cellSizeChange(cellElem), classie.add(this.img, className), this.flickity.dispatchEvent("lazyLoad", event, cellElem) }, Flickity.LazyLoader = LazyLoader, Flickity })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("flickity/js/index", ["./flickity", "./drag", "./prev-next-button", "./page-dots", "./player", "./add-remove-cell", "./lazyload"], factory) : "object" == typeof exports && (module.exports = factory(require("./flickity"), require("./drag"), require("./prev-next-button"), require("./page-dots"), require("./player"), require("./add-remove-cell"), require("./lazyload"))) }(window, (function factory(Flickity) { return Flickity })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("flickity-as-nav-for/as-nav-for", ["classie/classie", "flickity/js/index", "fizzy-ui-utils/utils"], (function (classie, Flickity, utils) { return factory(window, classie, Flickity, utils) })) : "object" == typeof exports ? module.exports = factory(window, require("desandro-classie"), require("flickity"), require("fizzy-ui-utils")) : window.Flickity = factory(window, window.classie, window.Flickity, window.fizzyUIUtils) }(window, (function factory(window, classie, Flickity, utils) { return Flickity.createMethods.push("_createAsNavFor"), Flickity.prototype._createAsNavFor = function () { this.on("activate", this.activateAsNavFor), this.on("deactivate", this.deactivateAsNavFor), this.on("destroy", this.destroyAsNavFor); var asNavForOption = this.options.asNavFor; if (asNavForOption) { var _this = this; setTimeout((function initNavCompanion() { _this.setNavCompanion(asNavForOption) })) } }, Flickity.prototype.setNavCompanion = function (elem) { elem = utils.getQueryElement(elem); var companion = Flickity.data(elem); if (companion && companion != this) { this.navCompanion = companion; var _this = this; this.onNavCompanionSelect = function () { _this.navCompanionSelect() }, companion.on("cellSelect", this.onNavCompanionSelect), this.on("staticClick", this.onNavStaticClick), this.navCompanionSelect() } }, Flickity.prototype.navCompanionSelect = function () { if (this.navCompanion) { var index = this.navCompanion.selectedIndex; this.select(index), this.removeNavSelectedElement(), this.selectedIndex == index && (this.navSelectedElement = this.cells[index].element, classie.add(this.navSelectedElement, "is-nav-selected")) } }, Flickity.prototype.activateAsNavFor = function () { this.navCompanionSelect() }, Flickity.prototype.removeNavSelectedElement = function () { this.navSelectedElement && (classie.remove(this.navSelectedElement, "is-nav-selected"), delete this.navSelectedElement) }, Flickity.prototype.onNavStaticClick = function (event, pointer, cellElement, cellIndex) { "number" == typeof cellIndex && this.navCompanion.select(cellIndex) }, Flickity.prototype.deactivateAsNavFor = function () { this.removeNavSelectedElement() }, Flickity.prototype.destroyAsNavFor = function () { this.navCompanion && (this.navCompanion.off("cellSelect", this.onNavCompanionSelect), this.off("staticClick", this.onNavStaticClick), delete this.navCompanion) }, Flickity })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define("imagesloaded/imagesloaded", ["eventEmitter/EventEmitter", "eventie/eventie"], (function (EventEmitter, eventie) { return factory(window, EventEmitter, eventie) })) : "object" == typeof module && module.exports ? module.exports = factory(window, require("wolfy87-eventemitter"), require("eventie")) : window.imagesLoaded = factory(window, window.EventEmitter, window.eventie) }(window, (function factory(window, EventEmitter, eventie) { var $ = window.jQuery, console = window.console; function extend(a, b) { for (var prop in b) a[prop] = b[prop]; return a } var objToString = Object.prototype.toString; function isArray(obj) { return "[object Array]" == objToString.call(obj) } function makeArray(obj) { var ary = []; if (isArray(obj)) ary = obj; else if ("number" == typeof obj.length) for (var i = 0; i < obj.length; i++)ary.push(obj[i]); else ary.push(obj); return ary } function ImagesLoaded(elem, options, onAlways) { if (!(this instanceof ImagesLoaded)) return new ImagesLoaded(elem, options, onAlways); "string" == typeof elem && (elem = document.querySelectorAll(elem)), this.elements = makeArray(elem), this.options = extend({}, this.options), "function" == typeof options ? onAlways = options : extend(this.options, options), onAlways && this.on("always", onAlways), this.getImages(), $ && (this.jqDeferred = new $.Deferred); var _this = this; setTimeout((function () { _this.check() })) } ImagesLoaded.prototype = new EventEmitter, ImagesLoaded.prototype.options = {}, ImagesLoaded.prototype.getImages = function () { this.images = []; for (var i = 0; i < this.elements.length; i++) { var elem = this.elements[i]; this.addElementImages(elem) } }, ImagesLoaded.prototype.addElementImages = function (elem) { "IMG" == elem.nodeName && this.addImage(elem), !0 === this.options.background && this.addElementBackgroundImages(elem); var nodeType = elem.nodeType; if (nodeType && elementNodeTypes[nodeType]) { for (var childImgs = elem.querySelectorAll("img"), i = 0; i < childImgs.length; i++) { var img = childImgs[i]; this.addImage(img) } if ("string" == typeof this.options.background) { var children = elem.querySelectorAll(this.options.background); for (i = 0; i < children.length; i++) { var child = children[i]; this.addElementBackgroundImages(child) } } } }; var elementNodeTypes = { 1: !0, 9: !0, 11: !0 }; ImagesLoaded.prototype.addElementBackgroundImages = function (elem) { for (var style = getStyle(elem), reURL = /url\(['"]*([^'"\)]+)['"]*\)/gi, matches = reURL.exec(style.backgroundImage); null !== matches;) { var url = matches && matches[1]; url && this.addBackground(url, elem), matches = reURL.exec(style.backgroundImage) } }; var getStyle = window.getComputedStyle || function (elem) { return elem.currentStyle }; function LoadingImage(img) { this.img = img } function Background(url, element) { this.url = url, this.element = element, this.img = new Image } return ImagesLoaded.prototype.addImage = function (img) { var loadingImage = new LoadingImage(img); this.images.push(loadingImage) }, ImagesLoaded.prototype.addBackground = function (url, elem) { var background = new Background(url, elem); this.images.push(background) }, ImagesLoaded.prototype.check = function () { var _this = this; if (this.progressedCount = 0, this.hasAnyBroken = !1, this.images.length) for (var i = 0; i < this.images.length; i++) { var loadingImage = this.images[i]; loadingImage.once("progress", onProgress), loadingImage.check() } else this.complete(); function onProgress(image, elem, message) { setTimeout((function () { _this.progress(image, elem, message) })) } }, ImagesLoaded.prototype.progress = function (image, elem, message) { this.progressedCount++, this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded, this.emit("progress", this, image, elem), this.jqDeferred && this.jqDeferred.notify && this.jqDeferred.notify(this, image), this.progressedCount == this.images.length && this.complete(), this.options.debug && console && console.log("progress: " + message, image, elem) }, ImagesLoaded.prototype.complete = function () { var eventName = this.hasAnyBroken ? "fail" : "done"; if (this.isComplete = !0, this.emit(eventName, this), this.emit("always", this), this.jqDeferred) { var jqMethod = this.hasAnyBroken ? "reject" : "resolve"; this.jqDeferred[jqMethod](this) } }, LoadingImage.prototype = new EventEmitter, LoadingImage.prototype.check = function () { var isComplete; this.getIsImageComplete() ? this.confirm(0 !== this.img.naturalWidth, "naturalWidth") : (this.proxyImage = new Image, eventie.bind(this.proxyImage, "load", this), eventie.bind(this.proxyImage, "error", this), eventie.bind(this.img, "load", this), eventie.bind(this.img, "error", this), this.proxyImage.src = this.img.src) }, LoadingImage.prototype.getIsImageComplete = function () { return this.img.complete && void 0 !== this.img.naturalWidth }, LoadingImage.prototype.confirm = function (isLoaded, message) { this.isLoaded = isLoaded, this.emit("progress", this, this.img, message) }, LoadingImage.prototype.handleEvent = function (event) { var method = "on" + event.type; this[method] && this[method](event) }, LoadingImage.prototype.onload = function () { this.confirm(!0, "onload"), this.unbindEvents() }, LoadingImage.prototype.onerror = function () { this.confirm(!1, "onerror"), this.unbindEvents() }, LoadingImage.prototype.unbindEvents = function () { eventie.unbind(this.proxyImage, "load", this), eventie.unbind(this.proxyImage, "error", this), eventie.unbind(this.img, "load", this), eventie.unbind(this.img, "error", this) }, Background.prototype = new LoadingImage, Background.prototype.check = function () { var isComplete; eventie.bind(this.img, "load", this), eventie.bind(this.img, "error", this), this.img.src = this.url, this.getIsImageComplete() && (this.confirm(0 !== this.img.naturalWidth, "naturalWidth"), this.unbindEvents()) }, Background.prototype.unbindEvents = function () { eventie.unbind(this.img, "load", this), eventie.unbind(this.img, "error", this) }, Background.prototype.confirm = function (isLoaded, message) { this.isLoaded = isLoaded, this.emit("progress", this, this.element, message) }, ImagesLoaded.makeJQueryPlugin = function (jQuery) { (jQuery = jQuery || window.jQuery) && (($ = jQuery).fn.imagesLoaded = function (options, callback) { var instance; return new ImagesLoaded(this, options, callback).jqDeferred.promise($(this)) }) }, ImagesLoaded.makeJQueryPlugin(), ImagesLoaded })), function (window, factory) { "use strict"; "function" == typeof define && define.amd ? define(["flickity/js/index", "imagesloaded/imagesloaded"], (function (Flickity, imagesLoaded) { return factory(window, Flickity, imagesLoaded) })) : "object" == typeof exports ? module.exports = factory(window, require("flickity"), require("imagesloaded")) : window.Flickity = factory(window, window.Flickity, window.imagesLoaded) }(window, (function factory(window, Flickity, imagesLoaded) { "use strict"; return Flickity.createMethods.push("_createImagesLoaded"), Flickity.prototype._createImagesLoaded = function () { this.on("activate", this.imagesLoaded) }, Flickity.prototype.imagesLoaded = function () { if (this.options.imagesLoaded) { var _this = this; imagesLoaded(this.slider).on("progress", onImagesLoadedProgress) } function onImagesLoadedProgress(instance, image) { var cell = _this.getParentCell(image.img); _this.cellSizeChange(cell && cell.element), _this.options.freeScroll || _this.positionSliderAtSelected() } }, Flickity })), $((function () { $(".js-flickityCustom").each((function () { var wrapAroundValue, navDotsVisible, navArrowsVisible, slideDuration, stopAfterSeconds; wrapAroundValue = !0 !== this.hasAttribute("data-wrapAround") || "true" == $(this).attr("data-wrapAround"), navDotsVisible = !0 !== this.hasAttribute("data-navDotsVisible") || "true" == $(this).attr("data-navDotsVisible"), navArrowsVisible = !0 !== this.hasAttribute("data-navArrowsVisible") || "true" == $(this).attr("data-navArrowsVisible"), !0 === this.hasAttribute("data-slideDuration") ? (slideDuration = $(this).attr("data-slideDuration"), slideDuration *= 1e3) : slideDuration = 6e3, $(this).flickity({ wrapAround: wrapAroundValue, prevNextButtons: navArrowsVisible, pageDots: navDotsVisible, autoPlay: slideDuration }), stopAfterSeconds = !0 === this.hasAttribute("data-stopAfterSeconds") ? $(this).attr("data-stopAfterSeconds") : 300, setTimeout((function () { $(".js-flickityCustom").flickity("stopPlayer") }), 1e3 * stopAfterSeconds) })) }));
